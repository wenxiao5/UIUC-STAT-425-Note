bikeshares <-  read.csv("BikeShares.csv", header=TRUE)
dim(bikeshares)
head(bikeshares)
# We remove columns 1,  7, 8, 9, 10:
bikeshares.reg = bikeshares[,c(-1,-7,-8,-9,-10)]
head(bikeshares.reg)
bikeshare.mlr = lm(cnt ~ t1 +  hum + wind_speed, data=bikeshares.reg )
confint(bikeshare.mlr)
confint(bikeshare.mlr, 't1', level=0.99)
library(ellipse)
install.packages(ellipse)
install.packages("ellipse")
library(ellipse)
library(ggplot2)
CR95 = ellipse(bikeshare.mlr, c(2,3))
CR99 = ellipse(bikeshare.mlr, c(2,3), level=0.99)
CR998 = ellipse(bikeshare.mlr, c(2,3), level=0.998)
dim(CR95)
head(CR95)
myCR = rbind(CR95, CR99, CR998);
myCR
myCR = data.frame(myCR);
myCR
names(myCR) = c("t1","hum");
myCR
myCR = rbind(CR95, CR99, CR998);
myCR = data.frame(myCR);
myCR
names(myCR) = c("t1","hum");
myCR
myCR[, 'level']=as.factor(c(rep(0.95, dim(CR95)[1]),
rep(0.99, dim(CR99)[1]),
rep(0.998, dim(CR998)[1])));
myCR
myCR[, 'level']=as.factor(c(rep(0.95, dim(CR95)[1]),
rep(0.99, dim(CR99)[1]),
rep(0.998, dim(CR998)[1])));
ggplot(data=myCR, aes(x=t1, y=hum, colour=level)) +
geom_path(aes(linetype=level), size=1.5) +
geom_point(x=coef(bikeshare.mlr)[2], y=coef(bikeshare.mlr)[3], shape=3, size=3, colour='red') +
geom_point(x=0, y=0, shape=1, size=3, colour='red')
# create a data frame on which you would like to predict
meanvalue=apply(bikeshares.reg[,2:5],2,mean)
meanvalue
# create a data frame on which you would like to predict
bikeshares.reg[,2:5]
meanvalue
apply(bikeshares.reg[,2:5],mean)
apply(bikeshares.reg[,2:5],2,mean)
apply(bikeshares.reg,2,mean)
predict.lm(bikeshare.mlr,x,interval="confidence")
x=data.frame(t(meanvalue))
predict.lm(bikeshare.mlr,x,interval="confidence")
predict.lm(bikeshare.mlr,x,interval="confidence",level=0.95)
predict.lm(bikeshare.mlr,x,interval="prediction",level=0.95)
predict.lm(bikeshare.mlr,x,interval="prediction")
library(faraway)
install.packages("faraway")
library(faraway)
library(faraway)
bikeshares <-  read.csv("BikeShares.csv", header=TRUE)
dim(bikeshares)
head(bikeshares)
# We remove columns 1,  7, 8, 9, 10:
bikeshares.reg = bikeshares[,c(-1,-7,-8,-9,-10)]
head(bikeshares.reg)
n=dim(bikeshares.reg)[1]; # sample size
p=4; # 3 predictors we have in the model plus the intercept
bikeshare.mlr = lm(cnt ~ t1 +  hum + wind_speed, data=bikeshares.reg )
library(faraway)
library(faraway)
bikeshares <-  read.csv("BikeShares.csv", header=TRUE)
dim(bikeshares)
head(bikeshares)
# We remove columns 1,  7, 8, 9, 10:
bikeshares.reg = bikeshares[,c(-1,-7,-8,-9,-10)]
head(bikeshares.reg)
bikeshare.mlr = lm(cnt ~ t1 +  hum + wind_speed, data=bikeshares.reg )
bikeshare.mlr
bikeshare.mlr$hat
influence(bikeshare.mlr)
influence(bikeshare.mlr)$hat
influence(bikeshare.mlr)$coefficients
bikeshare.mlr = lm(cnt ~ t1 +  hum + wind_speed, data=bikeshares.reg )
# Compute Leverages
lev=influence(bikeshare.mlr)$hat
# Determine which exceed the 2p/n threshold
newlev = lev[lev>2*p/n]
# Prepare a half-normal plot
halfnorm(newlev, 6, labs=as.character(1:length(newlev)), ylab="Leverages")
# Determine which exceed the 2p/n threshold
newlev = lev[lev>2*p/n]
p=4; # 3 predictors we have in the model plus the intercept
bikeshare.mlr = lm(cnt ~ t1 +  hum + wind_speed, data=bikeshares.reg )
# Compute Leverages
lev=influence(bikeshare.mlr)$hat
# Determine which exceed the 2p/n threshold
newlev = lev[lev>2*p/n]
n=dim(bikeshares.reg)[1]; # sample size
p=4; # 3 predictors we have in the model plus the intercept
bikeshare.mlr = lm(cnt ~ t1 +  hum + wind_speed, data=bikeshares.reg )
# Compute Leverages
lev=influence(bikeshare.mlr)$hat
# Determine which exceed the 2p/n threshold
newlev = lev[lev>2*p/n]
# Prepare a half-normal plot
halfnorm(newlev, 6, labs=as.character(1:length(newlev)), ylab="Leverages")
influence(bikeshare.mlr)$sigma
# Prepare a half-normal plot
halfnorm(newlev, 6, labs=as.character(1:length(newlev)), ylab="Leverages")
influence(bikeshare.mlr)$sigma
# Compute Leverages
lev=influence(bikeshare.mlr)$hat
# Determine which exceed the 2p/n threshold
newlev = lev[lev>2*p/n]
# Prepare a half-normal plot
halfnorm(newlev, 6, labs=as.character(1:length(newlev)), ylab="Leverages")
newlev
dim(newlev)
length(newlev)
summary(bikeshare.mlr)
# Prepare a half-normal plot
halfnorm(newlev, 6, labs=as.character(1:length(newlev)), ylab="Leverages")
bikeshares.reg[lev > 2*p/n,]
lev > 2*p/n
[lev > 2*p/n,]
bikeshares.reg[lev > 2*p/n,]
qt(.005, n-p-1)
qt(.05, n)
qf(.05, p, n)
# Compute Studentized Residuals
jack=rstudent(bikeshare.mlr);
# The critical value WITH Bonferroni correction is
qt(.05/(2*n), n-p-1)
# The critical value WITHOUT Bonferroni correction is
qt(.05/2, n-p-1)
# Sort the residuals indescending order to find outliers (if any)
sort(abs(jack), decreasing=TRUE)[1:10]
# Compute Cook's Distance
cook = cooks.distance(bikeshare.mlr)
# Extract max Cook's Distance
max(cook)
# Prepare a Half Normal Plot of Cook's distances
halfnorm(cook, 6, labs=as.character(1:length(cook)), ylab="Cook's distances")
whitewines<-read.csv("whitewines.csv", header = TRUE)
whitewines<-read.csv("whitewines.csv", header = TRUE)
head(whitewines)
whitewines
whitewines<-read.csv("whitewines.csv")
whitewines
whitewines<-read.csv("whitewines.csv")
View(whitewines)
View(whitewines)
whitewines.data<-read.csv(`whitewines.csv`,header = TRUE)
whitewines.data<-read.csv("whitewines.csv",header = TRUE)
View(whitewines.data)
whitewines.data<-read.table("whitewines.csv",header = TRUE)
